// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
  Agent Agent[]
  Meeting Meeting[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  agents Agent[]
  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Agent {
  id           String   @id @default(uuid()) // You can use cuid() or uuid() depending on nanoid alternative
  name         String
  userId       String
  instructions String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  Session Session[]

  Meeting Meeting[]
} 
enum MeetingStatus {
  upcoming
  active
  completed
  processing
  canceled
}

model Meeting {
  id           String       @id @default(uuid())
  name         String
  userId       String       @map("user_id")
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  agentId      String       @map("agent_id")
  agent        Agent        @relation(fields: [agentId], references: [id], onDelete: Cascade)
  status       MeetingStatus @default(upcoming)
  startedAt    DateTime?    @map("started_at")
  endedAt      DateTime?    @map("ended_at")
  transcriptUrl String?     @map("transcript_url")
  recordingUrl String?      @map("recording_url")
  summary      String?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @default(now()) @map("updated_at")

  @@map("meetings")
}
